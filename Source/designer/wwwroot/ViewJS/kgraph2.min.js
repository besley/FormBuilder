var plumbutility = function () { function t() { } var e = { lineWidth: .8, strokeStyle: "#096EBB", joinstyle: "round", outlineColor: "#096EBB", outlineWidth: .8 }; return t.importDefault = function () { jsPlumb.importDefaults({ Endpoint: ["Dot", { radius: 4 }], EndpointStyle: { fillStyle: "#4A6" }, PaintStyle: e, HoverPaintStyle: { strokeStyle: "#42a62c", lineWidth: 4 }, Connector: ["Flowchart", { joinstyle: "round", stub: [2, 2], gap: 1, cornerRadius: 5, alwaysRespectStubs: !1 }], ConnectionOverlays: [["Arrow", { location: 1, width: 10, length: 12, foldback: .4 }], ["Label", { location: .1, id: "label", cssClass: "aLabel" }]] }), jsPlumb.registerConnectionTypes({ basic: { paintStyle: e, hoverPaintStyle: { lineWidth: 1, strokeStyle: "#5C96BC", outlineWidth: 1, outlineColor: "white" } }, selected: { paintStyle: { strokeStyle: "red", lineWidth: 3 }, hoverPaintStyle: { lineWidth: 3.5 }, cssClass: "connector-selected" } }) }, t.addEndpointsTask = function (t) { var e = { isSource: !1, isTarget: !0, maxConnections: 10, anchor: [0, .5, 0, 0, 0, 0, "task_end endpoint"], paintStyle: { fillStyle: "red" }, endpoint: ["Rectangle", { width: 10, height: 10 }] }, n = { isSource: !0, isTarget: !1, maxConnections: -10, anchor: [1, .5, 0, 0, 0, 0, "task_end endpoint"] }; jsPlumb.addEndpoint(t, e), jsPlumb.addEndpoint(t, n) }, t.addEndpointsGateway = function (t) { var e = { isSource: !1, isTarget: !0, maxConnections: -10, anchor: [0, .5, 0, 1, -5, 0, "left_dec_end startpoint"], paintStyle: { fillStyle: "red" }, endpoint: ["Rectangle", { width: 10, height: 10 }] }, n = { isSource: !0, isTarget: !1, maxConnections: 10, anchor: [.5, 0, 1, 1, 0, -5, "upper_dec_start endpoint"] }, i = { isSource: !0, isTarget: !1, maxConnections: 10, anchor: [.5, 1, 1, 1, 0, 5, "bottom_dec_start startpoint"] }; jsPlumb.addEndpoint(t, e), jsPlumb.addEndpoint(t, i), jsPlumb.addEndpoint(t, n) }, t.workflowConnectorStartpoint = { isSource: !0, isTarget: !1, maxConnections: 1, anchor: "RightMiddle" }, t.workflowConnectorEndpoint = { isSource: !1, isTarget: !0, maxConnections: -10, anchor: "LeftMiddle", paintStyle: { fillStyle: "red" }, endpoint: ["Rectangle", { width: 12, height: 12 }] }, t.addEndpointsStart = function (e) { jsPlumb.addEndpoint(e, t.workflowConnectorStartpoint) }, t.addEndpointsEnd = function (e) { jsPlumb.addEndpoint(e, t.workflowConnectorEndpoint) }, t }(), kloader = function () { function t() { } return t.createNew = function (t) { var e = {}, n = {}, i = [{ id: jshelper.getUUID(), name: "开始", code: "start", type: "StartNode", left: 370, top: 70, width: 50, height: 50, inputConnectors: [{ type: "input", index: 1, name: "A" }], outputConnectors: [{ type: "output", index: 1, name: "X" }] }, { id: jshelper.getUUID(), name: "结束", code: "end", type: "EndNode", left: 370, top: 370, width: 50, height: 50, inputConnectors: [{ type: "input", index: 1, name: "A" }], outputConnectors: [{ type: "output", index: 1, name: "X" }] }]; e.process = n, n.id = t.ProcessGUID, n.name = t.ProcessName, n.description = t.Description, n.snodes = i; var r = new kgraph.GraphView(t.ProcessGUID, e); return r }, t.initialize = function (t) { var e = {}, n = {}, i = [], r = $.parseXML(t.XmlContent); e.participants = i, e.process = n, $(r).find("Participant").each(function (t) { var e = {}; e.type = $(this).attr("type"), e.id = $(this).attr("id"), e.name = $(this).attr("name"), e.code = $(this).attr("code"), e.outerId = $(this).attr("outerId"), i.push(e) }); var o = $(r).find("Process"); if (o) { var a = [], s = []; n.name = $(o).attr("name"), n.id = $(o).attr("id"); var d = $(o).children("Description"); n.description = jshelper.replaceHTMLTags($(d).text()), n.snodes = a, n.slines = s, $(o).find("Activity").each(function (t) { var e = this, n = {}, i = {}, r = [], o = {}, s = {}, d = {}; n.id = $(e).attr("id"), n.name = $(e).attr("name"), n.code = $(e).attr("code"), n.text = ""; var c = $(e).find("Description"); n.description = jshelper.replaceHTMLTags($(c).text()), i = $(e).find("ActivityType"), n.type = $(i).attr("type"), "GatewayNode" == n.type ? (n.gatewaySplitJoinType = $(i).attr("gatewaySplitJoinType"), n.gatewayDirection = $(i).attr("gatewayDirection")) : "SubProcessNode" == n.type ? n.subId = $(i).attr("subId") : "MultipleInstanceNode" == n.type && (n.complexType = $(i).attr("complexType"), n.mergeType = $(i).attr("mergeType"), n.compareType = $(i).attr("compareType"), n.completeOrder = $(i).attr("completeOrder")), $(e).find("Performer").each(function (t) { var e = this, n = {}; n.id = $(e).attr("id"), r.push(n) }), n.performers = r, o = $(e).find("Geography"), s = $(o).find("Widget"); var l = [], p = []; n.inputConnectors = l, n.outputConnectors = p, n.left = parseInt($(s).attr("left")), n.top = parseInt($(s).attr("top")), n.width = parseInt($(s).attr("width")), n.height = parseInt($(s).attr("height")), d = $(s).find("Connectors"), $(d).find("Connector").each(function (t) { var e = this, i = {}; i.type = $(e).attr("type"), i.index = $(e).attr("index"), i.name = $(e).attr("name"); var r = $(e).attr("type"); "input" == r ? n.inputConnectors.push(i) : "output" == r && n.outputConnectors.push(i) }), a.push(n) }), $(r).find("Transition").each(function (t) { var e = {}; e.id = $(this).attr("id"), e.from = $(this).attr("from"), e.to = $(this).attr("to"); var n = $(this).find("Description"); e.description = jshelper.replaceHTMLTags($(n).text()); var i = {}, r = $(this).find("Receiver"), o = $(r).attr("type"); void 0 !== o && (i.type = o), e.receiver = i; var a = {}, d = $(this).find("Condition"), c = $(d).attr("type"); if (void 0 !== c) { a.type = c; $(this).find("ConditionText"); a.text = jshelper.replaceHTMLTags($(d).text()) } e.condition = a; var l = $(this).find("Geography"), p = $(l).find("Line"), u = $(p).attr("anchors"); void 0 !== u && "undefined" !== u && (e.anchors = $.parseJSON(u)), e.sourceId = $(p).attr("sourceId"), e.targetId = $(p).attr("targetId"), e.fromConnector = $(p).attr("fromConnector"), e.toConnector = $(p).attr("toConnector"), s.push(e) }) } var c = { processGUID: t.ProcessGUID, version: t.Version, packageData: e }, l = new kgraph.GraphView(c); return l }, t.serialize2Xml = function (t, e) { var n = {}, i = new XMLWriter("utf-8", "1.0"); i.formatting = "indented", i.indentChar = " ", i.indentation = 2, i.writeStartDocument(void 0), i.writeStartElement("Package"); var r = e.participants; if (r) { var o = r.length; if (o > 0) { i.writeStartElement("Participants"); for (var a = 0; o > a; a++) { var s = r[a]; i.writeStartElement("Participant"), i.writeAttributeString("type", s.type), i.writeAttributeString("id", s.id), i.writeAttributeString("name", s.name), i.writeAttributeString("code", s.code), i.writeAttributeString("outerId", s.outerId), i.writeEndElement() } i.writeEndElement() } } var d = e.process; i.writeStartElement("WorkflowProcesses"), i.writeStartElement("Process"), i.writeAttributeString("name", d.name), i.writeAttributeString("id", d.id), d.description && i.writeElementString("Description", jshelper.escapeHtml(d.description)); var c = $(".gnode").length; c > 0 && (i.writeStartElement("Activities"), $(".gnode").each(function (t, e) { var n = $(e), r = n.attr("id"), o = $.grep(d.snodes, function (t) { return "ACT" + t.id == r })[0]; if (i.writeStartElement("Activity"), i.writeAttributeString("name", o.name), i.writeAttributeString("id", o.id), i.writeAttributeString("code", o.code), o.description && i.writeElementString("Description", jshelper.escapeHtml(o.description)), i.writeStartElement("ActivityType"), i.writeAttributeString("type", o.type), "GatewayNode" == o.type ? (i.writeAttributeString("gatewaySplitJoinType", o.gatewaySplitJoinType), i.writeAttributeString("gatewayDirection", o.gatewayDirection)) : "SubProcessNode" == o.type ? i.writeAttributeString("subId", o.subId) : "MultipleInstanceNode" == o.type && (i.writeAttributeString("complexType", o.complexType), i.writeAttributeString("mergeType", o.mergeType), i.writeAttributeString("compareType", o.compareType), i.writeAttributeString("completeOrder", o.completeOrder)), i.writeEndElement(), o.performers) { var a = o.performers.length; if (a > 0) { i.writeStartElement("Performers"); for (var s = 0; a > s; s++) { var c = o.performers[s]; i.writeStartElement("Performer"), i.writeAttributeString("id", c.id), i.writeEndElement() } i.writeEndElement() } } i.writeStartElement("Geography"), i.writeStartElement("Widget"), i.writeAttributeString("left", o.left), i.writeAttributeString("top", o.top), i.writeAttributeString("width", o.width), i.writeAttributeString("height", o.height); var l = o.inputConnectors.length, p = o.outputConnectors.length; if (l > 0 || p > 0) { if (i.writeStartElement("Connectors"), l > 0) for (var u = 0; l > u; u++) { var m = o.inputConnectors[u]; i.writeStartElement("Connector"), i.writeAttributeString("type", m.type), i.writeAttributeString("index", m.index), i.writeAttributeString("name", m.name), i.writeEndElement() } if (p > 0) for (var h = 0; p > h; h++) { var m = o.outputConnectors[h]; i.writeStartElement("Connector"), i.writeAttributeString("type", m.type), i.writeAttributeString("index", m.index), i.writeAttributeString("name", m.name), i.writeEndElement() } i.writeEndElement() } i.writeEndElement(), i.writeEndElement(), i.writeEndElement() }), i.writeEndElement()); var l = jsPlumb.getConnections(); return l.length > 0 && (i.writeStartElement("Transitions"), $.each(l, function (t, e) { var n = e.sourceId, r = e.targetId, o = $.grep(d.slines, function (t) { return t.sourceId == n && t.targetId == r })[0]; i.writeStartElement("Transition"), i.writeAttributeString("id", o.id), i.writeAttributeString("from", o.from), i.writeAttributeString("to", o.to), o.description && i.writeElementString("Description", jshelper.escapeHtml(o.description)), o.receiver && (i.writeStartElement("Receiver"), o.receiver.type && i.writeAttributeString("type", o.receiver.type), i.writeEndElement()), o.condition && (i.writeStartElement("Condition"), o.condition.type && (i.writeAttributeString("type", o.condition.type), o.condition.text && (i.writeStartElement("ConditionText"), i.writeCDATA($.trim(o.condition.text)), i.writeEndElement())), i.writeEndElement()), i.writeStartElement("Geography"), i.writeStartElement("Line"), i.writeAttributeString("anchors", JSON.stringify(o.anchors)), i.writeAttributeString("sourceId", o.sourceId), i.writeAttributeString("targetId", o.targetId), i.writeAttributeString("fromConnector", o.fromConnector), i.writeAttributeString("toConnector", o.fromConnector), i.writeEndElement(), i.writeEndElement(), i.writeEndElement() }), i.writeEndElement()), i.writeEndElement(), i.writeEndElement(), i.writeEndElement(), i.writeEndDocument(), n.ProcessGUID = t, n.XmlContent = i.flush(), i.close(), n }, t }(), kmain = function () { function t() { } function e() { $(".progress .bar").progressbar({ transition_delay: 200 }); var t = $(".js-loading-bar"); t.find(".bar"); t.modal("show"), setTimeout(function () { t.modal("hide") }, 500) } function n(t, e, n) { $("#" + n).css({ "-webkit-transform": "scale(" + e + ")", "-moz-transform": "scale(" + e + ")", "-ms-transform": "scale(" + e + ")", "-o-transform": "scale(" + e + ")", transform: "scale(" + e + ")", TransformOrigin: "0% 0%" }), t.setZoom(e) } t.mcurrentSelectedDomElement = null, t.mselectedActivityPerformerGUID = "", t.mselectedParticipantType = null, t.mselectedParticipantItem = null, t.mcurrentXmlContent = "", t.init = function () { e(), $("#kgraphContainer").empty(), r(), o(), i(), $(".wfdModalDialog").on("hidden", function () { $(this).removeData("modal").find(".modal-body").empty() }), $("#kgraphContainer").on("click", function (t) { $(this).focus() }) }; var i = function () { $("body").click(function (t) { $(".popmenu").hide() }).keyup(function (e) { return "kgraphContainer" != e.target.id ? !1 : void (46 == e.keyCode && null != t.mcurrentSelectedDomElement && t.removeGraphElement()) }) }, r = function () { $(".imagepart").draggable({ helper: "clone", scope: "dragflag" }) }, o = function () { $("#kgraphContainer").droppable({ accept: ".imagepart", activeClass: "drop-active", scope: "dragflag", cursor: "cross", drop: function (e, n) { var i = parseInt(n.offset.left - $(this).offset().left, 10), r = parseInt(n.offset.top - $(this).offset().top, 10), o = n.draggable[0].id, a = { type: o, left: i, top: r }; return void 0 === t.mgraphView ? void $.msgBox({ title: "Designer / Index", content: "请先打开流程记录！", type: "info" }) : void t.mgraphView.drawSingleNode(a) } }) }; t.setSelectedProcessGUIDCurrent = function (e) { t.mselectedProcessGUIDCurrent != e ? (t.mselectedProcessGUIDPrevious = t.mselectedProcessGUIDCurrent, t.mselectedProcessGUIDCurrent = e, t.misSelectedNew = !0) : t.misSelectedNew = !1 }, t.cancelProcessRecord = function () { t.misSelectedNew = !1 }, t.saveProcessFile = function () { if (void 0 !== t.mgraphView) { var e = t.mgraphView.processGUID, n = t.mgraphView.packageData, i = kloader.serialize2Xml(e, n); processfile.saveProcessFile(i) } else $.msgBox({ title: "Designer / Index", content: "请确认图形是否处于编辑状态！", buttons: [{ value: "Ok" }] }) }, t.showActivityProperty = function () { if (t.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_NODE) { var e = t.mcurrentSelectedDomElement.node; e.sdata.type !== kgraph.Config.NODE_TYPE_START && e.sdata.type !== kgraph.Config.NODE_TYPE_END && kgraph.showActivityPropertyDialog(e) } else t.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_CONNECTION && kgraph.showTransitionPropertyDialog() }, t.addNewNodeWithConnection = function (e, n) { var i = parseInt(e.clientX - e.offsetX, 10), r = parseInt(e.clientY - e.offsetY, 10), o = { type: n, left: i, top: r }, a = t.mgraphView.drawSingleNode(o), s = t.mcurrentSelectedDomElement.node.sdata, d = { sourceId: "ACT" + s.id, targetId: "ACT" + a.id, anchors: [[1, .5, 0, 0, 5, 0], [0, .5, 0, 0, 0, 0]] }, c = new kgraph.Line(d); c.render() }, t.removeGraphElement = function () { t.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_NODE ? $.msgBox({ title: "Are You Sure", content: "确认要删除节点吗? 将会删除节点属性及用户角色等数据!!!", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { return "Yes" == e ? (jsPlumb.remove(t.mcurrentSelectedDomElement.element), a(t.mcurrentSelectedDomElement.node), void (t.mcurrentSelectedDomElement = null)) : void 0 } }) : t.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_CONNECTION && $.msgBox({ title: "Are You Sure", content: "确认要删除连线吗? 将会删除连线上的条件等数据!!!", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { return "Yes" == e ? (jsPlumb.detach(t.mcurrentSelectedDomElement.connection), s(t.mcurrentSelectedDomElement.line), void (t.mcurrentSelectedDomElement = null)) : void 0 } }) }; var a = function (e) { for (var n = e.id(), i = [], r = [], o = t.mgraphView.lines, a = t.mgraphView.processData.slines, s = 0; s < o.length; s++) (n == o[s].from() || n == o[s].to()) && r.push(s); for (var s = r.length - 1; s >= 0; s--) o.splice(r[s], 1); for (var s = 0; s < a.length; s++) (n == a[s].from || n == a[s].to) && i.push(s); for (var s = i.length - 1; s >= 0; s--) a.splice(i[s], 1); for (var d = t.mgraphView.nodes, s = 0; s < d.length; s++) if (n == d[s].id()) { d.splice(s, 1); break } for (var c = t.mgraphView.processData.snodes, s = 0; s < c.length; s++) if (n == c[s].id) { c.splice(s, 1); break } }, s = function (e) { for (var n = e.id(), i = t.mgraphView.lines, r = t.mgraphView.processData.slines, o = 0; o < i.length; o++) if (n == i[o].id()) { i.splice(o, 1); break } for (var o = 0; o < r.length; o++) if (n == r[o].id) { r.splice(o, 1); break } }; return t.exportXML = function () { if (void 0 == t.mgraphView) return $.msgBox({ title: "Designer / Graph", content: "请先打开流程记录！", type: "alert" }), !1; var e = t.mgraphView.processGUID, n = t.mgraphView.packageData, i = kloader.serialize2Xml(e, n); t.mcurrentXmlContent = i.XmlContent, $("#modalXMLContentForm").modal("show"), $("#txtXmlContentArea").val(t.mcurrentXmlContent) }, t.exportPNG = function () { var t = $("#kgraphContainer").get(0); html2canvas(t, { onrendered: function (e) { ctx = e.getContext("2d"), $flows = $("> svg", t), $flows.each(function () { $svg = $(this), offset = $svg.position(), svgStr = this.outerHTML, ctx.drawSvg(svgStr, offset.left - 226, offset.top - 58) }), $endpoints = $("._jsPlumb_endpoint > svg", t), $endpoints.each(function () { $svg = $(this), offset = $svg.parent().position(), svgStr = this.outerHTML, ctx.drawSvg(svgStr, offset.left, offset.top) }), e.toBlob(function (t) { saveAs(t, "screenshot.png") }) } }) }, t.ratioDisplay = function () { var t = document.getElementById("rear-ratio"), e = document.getElementById("rear-ratio-display"); e.value = t.value, n(jsPlumb, t.value / 100, "kgraphContainer"), $("#kgraphContainer").css({ left: "0px", right: "180px" }) }, t.ratioDisplay2 = function () { var t = document.getElementById("rear-ratio-display"), e = document.getElementById("rear-ratio"); e.value = t.value, n(jsPlumb, t.value / 100, "kgraphContainer"), $("#kgraphContainer").css({ left: "0px", right: "180px" }) }, t }(), kgraph = function () { function t() { } return t.Config = { NODE_PREFIX: "ACT", NODE_TYPE_START: "StartNode", NODE_TYPE_TASK: "TaskNode", NODE_TYPE_END: "EndNode", NODE_TYPE_GATEWAY: "GatewayNode", NODE_TYPE_SUBPROCESS: "SubProcessNode", NODE_TYPE_MULTIPLEINSTANCE: "MultipleInstanceNode", NODE_TYPE_COMPLEX_SIGNTOGETHER: "SignTogether", NODE_TYPE_COMPLEX_SIGHFORWARD: "SignForward", ELEMENT_TYPE_NODE: "NODE", ELEMENT_TYPE_CONNECTION: "CONNECTION" }, t.GraphView = function (e) { var n = this; this.processGUID = e.processGUID, this.packageData = e.packageData, this.processData = e.packageData.process; var i = function () { plumbutility.importDefault(), jsPlumb.setContainer("kgraphContainer"), jsPlumb.bind("connection", function (i, s) { var d = i.source.id.substr(3, i.source.id.length - 3), c = i.target.id.substr(3, i.target.id.length - 3), l = o(d, c); if (null === l) { var p = $.map(i.connection.endpoints, function (t) { return [[t.anchor.x, t.anchor.y, t.anchor.orientation[0], t.anchor.orientation[1], t.anchor.offsets[0], t.anchor.offsets[1]]] }); l = { id: jshelper.getUUID(), from: d, to: c, description: "请输入转移描述信息", anchors: p, sourceId: i.connection.sourceId, targetId: i.connection.targetId, fromConnector: 1, toConnector: 1 }; var u = e.packageData.process.slines; u.push(l); var m = new t.Line(l); n.lines.push(m) } i.connection.bind("click", function (t, e) { var n = i.source.id.substr(3, i.source.id.length - 3), o = i.target.id.substr(3, i.target.id.length - 3), s = a(n, o); r(t, s), $(".popmenu").hide(); var d = e.clientX, c = e.clientY; $("#divPopMenuCommand").css({ left: d, top: c }).show(), e.stopPropagation() }).bind("dblclick", function (e, n) { t.showTransitionPropertyDialog() }).bind("mouseover", function (t, e) { }) }) }, r = function (e, n) { null != kmain.mcurrentSelectedDomElement && (null != kmain.mcurrentSelectedDomElement.connection ? kmain.mcurrentSelectedDomElement.connection.toggleType("selected") : null != kmain.mcurrentSelectedDomElement.node && $(kmain.mcurrentSelectedDomElement.element).toggleClass("highlight")), kmain.mcurrentSelectedDomElement = { type: t.Config.ELEMENT_TYPE_CONNECTION, connection: e, line: n }, e.toggleType("selected") }, o = function (t, n) { for (var i = null, r = e.packageData.process.slines, o = 0; o < r.length; o++) if (r[o].from === t && r[o].to === n) { i = r[o]; break } return i }, a = function (t, e) { for (var i = null, r = o(t, e), a = 0; a < n.lines.length; a++) if (r.id == n.lines[a].id()) { i = n.lines[a]; break } return i }; i(); var s = function (e) { var n = null, i = []; if (e) for (var r = 0; r < e.length; r++) n = new t.Node(e[r]), i.push(n); return i }; this.nodes = s(this.processData.snodes); var d = function (e) { var n = null, i = []; if (e) for (var r = 0; r < e.length; r++) n = new t.Line(e[r]), n.render(), i.push(n); return i }; this.lines = d(this.processData.slines), this.drawSingleNode = function (e) { var n = { id: jshelper.getUUID(), code: "", type: e.type, complexType: e.complexType, left: e.left, top: e.top, inputConnectors: [], outputConnectors: [] }; if (e.type == t.Config.NODE_TYPE_START) n.name = "开始"; else if (e.type == t.Config.NODE_TYPE_END) n.name = "结束"; else if (e.type == t.Config.NODE_TYPE_GATEWAY) n.name = "Gateway"; else if (e.type == t.Config.NODE_TYPE_SUBPROCESS) n.name = "子流程"; else if (e.type == t.Config.NODE_TYPE_TASK) n.name = "新节点"; else { if (e.type != t.Config.NODE_TYPE_MULTIPLEINSTANCE) throw new Error("未知节点类型！"); n.name = "会(加)签" } var i = new t.Node(n); return this.processData.snodes.push(n), this.nodes.push(i), n } }, t.Node = function (e) { this.sdata = e; var n = this; this.id = function () { return this.sdata.id }, this.name = function () { return this.sdata.name || "" }, this.code = function () { return this.sdata.code || "" }, this.text = function () { return this.sdata.text || "" }, this.type = function () { return this.sdata.type }, this.complexType = function () { return this.sdata.complexType }, this.left = function () { return this.sdata.left }, this.top = function () { return this.sdata.top }, this.width = function () { return this.sdata.width }, this.height = function () { return this.sdata.height }, this.setNodeName = function (e) { var n = t.Config.NODE_PREFIX + this.id(); $("#" + n).text(e) }, this.render = function () { var r = null, o = t.Config.NODE_PREFIX + this.id(), a = this.type(); if (a === t.Config.NODE_TYPE_START) r = this.renderStartNode(o); else if (a === t.Config.NODE_TYPE_END) r = this.renderEndNode(o); else if (a === t.Config.NODE_TYPE_TASK || a === t.Config.NODE_TYPE_MULTIPLEINSTANCE) r = this.renderTaskNode(o, this); else if (a === t.Config.NODE_TYPE_GATEWAY) r = this.renderGatewayNode(o, this); else { if (a !== t.Config.NODE_TYPE_SUBPROCESS) throw new Error("未知节点类型！"); r = this.renderSubProcessNode(o, this) } this.sdata.width = r.width(), this.sdata.height = r.height(), r.bind("click", function (e) { $(".popmenu").hide(), i(n, this); var o = $("#kgraphContainer").position().left + r.position().left + r.width() + 20, a = $("#kgraphContainer").position().top + r.position().top - 10, s = kmain.mcurrentSelectedDomElement.node.sdata, d = $("#divPopMenu"); s.type === t.Config.NODE_TYPE_END && (d = $("#divPopMenuCommand")), d.css({ left: o, top: a }).show(), e.stopPropagation() }).bind("dblclick", function () { t.showActivityPropertyDialog(n) }), jsPlumb.draggable(o, { stop: function (t, n) { var i = parseInt(n.position.left, 10), r = parseInt(n.position.top, 10); e.left = i, e.top = r, $(this).css({ left: i, top: r, position: "absolute" }) } }) }; var i = function (e, n) { null != kmain.mcurrentSelectedDomElement && (null != kmain.mcurrentSelectedDomElement.connection ? kmain.mcurrentSelectedDomElement.connection.toggleType("selected") : null != kmain.mcurrentSelectedDomElement.node && $(kmain.mcurrentSelectedDomElement.element).toggleClass("highlight")), kmain.mcurrentSelectedDomElement = { type: t.Config.ELEMENT_TYPE_NODE, node: e, element: n }, $(kmain.mcurrentSelectedDomElement.element).toggleClass("highlight") }; this.renderTaskNode = function (t, e) { var n = $("<div>").attr("id", t).addClass("task").addClass("gnode"); return n.text(e.name()).css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).appendTo($("#kgraphContainer")), plumbutility.addEndpointsTask(t), n }, this.renderGatewayNode = function (t, e) { var n = $("<div>").addClass("ctrl_container"), i = $("<div>").addClass("decision").addClass("gnode").attr("id", t).css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }); return i.append(n).appendTo($("#kgraphContainer")), plumbutility.addEndpointsGateway(t), i }, this.renderSubProcessNode = function (t, e) { var n = $("<div>").attr("id", t).addClass("task").addClass("gnode"); return n.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).text(e.name()).appendTo($("#kgraphContainer")), plumbutility.addEndpointsTask(t), n }, this.renderStartNode = function (t) { var e = $("<div>").attr("id", t).addClass("circle-start").addClass("gnode"); return e.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).appendTo($("#kgraphContainer")), plumbutility.addEndpointsStart(t), e }, this.renderEndNode = function (t) { var e = $("<div>").attr("id", t).addClass("circle-end").addClass("gnode"); return e.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).appendTo($("#kgraphContainer")), plumbutility.addEndpointsEnd(t), e }, this.render() }, t.showActivityPropertyDialog = function (e) { var n = ""; if (e.type() == t.Config.NODE_TYPE_TASK || e.type() == t.Config.NODE_TYPE_MULTIPLEINSTANCE) n = "activity/edit", $("#modelActivityForm").data("node", e).modal({ remote: n }); else if (e.type() == t.Config.NODE_TYPE_GATEWAY) n = "activity/gateway", $("#modelGatewayForm").data("node", e).modal({ remote: n }); else { if (e.type() != t.Config.NODE_TYPE_SUBPROCESS) return e.type() == t.Config.NODE_TYPE_START || e.type() == t.Config.NODE_TYPE_END ? !1 : ($.msgBox({ title: "Designer / Graph", content: "未知节点类型！" + e.type(), type: "alert" }), !1); n = "activity/subprocess", $("#modelSubProcessForm").data("node", e).modal({ remote: n }) } }, t.showTransitionPropertyDialog = function () { var t = kmain.mcurrentSelectedDomElement.line, e = "transition/edit"; $("#modelTransitionForm").data("line", t).modal({ remote: e }) }, t.Line = function (t) { this.sdata = t, this.connection = null; this.id = function () { return this.sdata.id }, this.from = function () { return this.sdata.from }, this.to = function () { return this.sdata.to }, this.render = function () { var t = jsPlumb.connect({ source: this.sdata.sourceId, target: this.sdata.targetId, anchors: this.sdata.anchors }); this.connection = t } }, t }();